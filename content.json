{"meta":{"title":"bisa的博客","subtitle":"路漫漫其修远兮","description":"学习实录","author":"bisa","url":"https://biersaa.github.io","root":"/"},"pages":[{"title":"about me","date":"2021-12-18T08:59:57.000Z","updated":"2021-12-18T11:27:43.751Z","comments":true,"path":"about/index.html","permalink":"https://biersaa.github.io/about/index.html","excerpt":"","text":"这里bisa 写这个博客主要是想整理一下自己学习过程中遇到的小东西，或者说写给自己看的避免之后遗忘的技能 这个博客会与我共同成长OvO 我只是一个普通的阿宅，称不上资深【希望交到可爱的朋友】，想跟我说点什么的话，可以通过邮箱联系我：&#x31;&#x38;&#x32;&#x34;&#x36;&#x31;&#53;&#52;&#x31;&#49;&#64;&#113;&#113;&#x2e;&#99;&#111;&#109; 喜欢在自己的电脑面前做些奇怪的事情（？） 会冒出来一些小想法 会和朋友出门玩（所以也不能算是完全宅吧） 喜欢辩论，喜欢和你讲讲逻辑（但是不太喜欢动脑 | 这并不冲突） 我的目标 学一手硬件 大数据分析处理 cv 以上大概就是我的方向（虽然本人现在也是在摸索阶段） 欢迎来到这里的每一位小饼干🍪来找我玩~"},{"title":"","date":"2021-12-18T04:31:37.000Z","updated":"2021-12-18T04:32:24.719Z","comments":false,"path":"categories/index.html","permalink":"https://biersaa.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2021-12-18T04:28:20.000Z","updated":"2021-12-18T04:29:25.856Z","comments":false,"path":"tags/index.html","permalink":"https://biersaa.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"anaconda配置pytorch时遇到的问题","slug":"anaconda配置pytorch时遇到的问题","date":"2022-01-08T15:15:10.000Z","updated":"2022-01-08T15:52:27.887Z","comments":true,"path":"2022/01/08/anaconda配置pytorch时遇到的问题/","link":"","permalink":"https://biersaa.github.io/2022/01/08/anaconda%E9%85%8D%E7%BD%AEpytorch%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"","text":"win10+anaconda配置pytorch，pycharm使用安装好了pytorch后import torch仍报错其实一般来说这种问题有两种情况，一是版本号不对，二是路径不对 所以对于我而言，问题在于没有打开虚拟环境下的python，pycharm无法使用也是因为解释器没有选择那个虚拟环境的解释器 虚拟环境相当于一个独立个体，它里面也包括了python等，要是想使用torch，需要在那个环境里面进行使用 创建pytorch虚拟环境先用anaconda创建一个pytorch的虚拟环境，可以用图形界面，也可以用命令来创建（如下）： 1conda create -n pytorch python=3.8 版本按需选择 查看已有的环境 1conda info --envs 出现pytorch的列表就行： 安装pytorch去官网 按照需求进行筛选后，执行Run this Command 这一栏的命令 这里我下载的时候很不顺利，可以采取更换镜像源提速保质（直接用官网的下载实在是太容易出错了） 更换镜像源有两种选择，一种是执行下面的这堆命令 12345conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ condaconfig --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ conda config --set show_channel_urls yes 一种是更改anaconda下的.condarc文件【不推荐对anaconda文件夹中内容不熟悉的兄弟们采用这种方式，虽然看起来简便】 这一步如果东西没下载完全，就多执行几次，我前几次没装上，后来一次没装全，差啥补啥，比如我最后就差个pillow，pip install pillow（或者用 conda 装）或者选择再执行一次安装命令","categories":[{"name":"报错","slug":"报错","permalink":"https://biersaa.github.io/categories/%E6%8A%A5%E9%94%99/"}],"tags":[{"name":"报错","slug":"报错","permalink":"https://biersaa.github.io/tags/%E6%8A%A5%E9%94%99/"}]},{"title":"卷积神经网络的认识","slug":"卷积神经网络的认识","date":"2022-01-05T12:20:04.000Z","updated":"2022-01-07T10:50:13.375Z","comments":true,"path":"2022/01/05/卷积神经网络的认识/","link":"","permalink":"https://biersaa.github.io/2022/01/05/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84%E8%AE%A4%E8%AF%86/","excerpt":"卷积和神经网络概述（CNN） 笔者也是刚接触神经网络，这篇文章仅为简单梳理各名称之间的关系，如果写的哪里有问题欢迎通过邮件指出 卷积神经网络的结构 输入层 卷积层 池化层 全连接层 输出层","text":"卷积和神经网络概述（CNN） 笔者也是刚接触神经网络，这篇文章仅为简单梳理各名称之间的关系，如果写的哪里有问题欢迎通过邮件指出 卷积神经网络的结构 输入层 卷积层 池化层 全连接层 输出层 不过通常卷积层和池化层会重复几遍提高识别的精确度，比如输入层-卷积层-池化层-卷积层-池化层-全连接层-全连接层-分类器 大概流程为由卷积层使用过滤器进行特征的提取（过滤器为从上一层矩阵进行定量数据处理的移动模块，将一张图片全部处理完后，得到长宽更小，高度更高的图片），池化层为了降低信息损失，会避免卷积过程中长宽的压缩，得到边缘特征，传入全连接层进行信息比对从而分类 卷积处理图片的过程如下|&gt;从左到右 （图片的高度即RGB通道的数量，比如一张图片上拥有RGB三种颜色，它的高就为3） 卷积层 简单理解：卷积层是突出主要特征，弱化边缘影响 卷积是什么它可以具化为一个公式（连续）： 离散的公式如下： 实际上，这两个公式都代表着一个将 f(x) 函数反转后穿过 g(x) 函数所在定义域的过程中，两者重叠的面积 从连续的两个函数入手，我们打个比方，g(x) 是个火车，f(x) 是个山洞，它们并列在x轴方向上（或者说他们定义域相同，且头并头、尾并尾），这时你想要让火车穿过这个山洞，就需要调转火车头并让火车驶入山洞，那么，g(x) 翻转即为 g(-x)，我们想要研究“随时间变化，火车与山洞的位置关系”，就要添入时间变量，从而使 g(-x) 变为 g(t-x) ；积分则代表无数个瞬间状态求和 切换到离散函数上，其实是一样的——我们把离散函数当作相对另一个函数而运动的样本点 经过这样的运算，我们可以将两个函数的动态比对结果转化为直观的数据 要是扔到物理上面，通过卷积定理，我们可以解决信号转换的难题 需要注意的是，卷积的时候，运动的函数带动了两个量的变化，一是重叠的区间，二是重叠的面积 上面我们提到的卷积，可以说是仍在数学领域的理解；若要将卷积应用到神经网络，则是另一种近似的体现 CNN实现卷积过程就在特征过滤器（或者说是过滤器、内核——它的类型有很多，按需选择）中，它由比原有的图像矩阵小得多的矩阵组成，这个内核会在输入的图像矩阵中进行移动、计算（取两个矩阵的点积），最终它将得到原始图像的特征图 特征图突出显示原始图像的各种边缘，比如PS使用一种内核进行模糊处理 简单提过滤算法，就像垂直滤波器是通过某一像素块与旁边像素块明度差的绝对值大小进行判断的，我们可以通过对比，明白一个红色的苹果在绿色背景下格外显眼，因为像素的明度差别比较大 显示边缘可以让机器识别图像的纹理，比如一个简单的圆圈⭕、水平线、垂直线、角（里面也会应用一些函数，比如经典ReLU） 卷积层包括什么卷积层由多个卷积核组成，一个核对应一个map，每个map拥有多个神经元（也就是一个卷积层中，我们通过几个不同类型的内核过滤出具有不同特征的特征图，每个核过滤的所有特征图组为map；神经元则是图像矩阵中一个个像素块对应的小矩阵） 上面提到了卷积神经网络的一大特性，局部对应；最初的神经网络复杂在，某一层的单个神经元连接了上一层所有的神经元，而卷积则是一个神经元与上一层局部的神经元相对应 也就是卷积将对上一张图每个像素块的处理简化为对上一张图一小部分内的像素块进行处理（一个像素块在计算机中的储存形式为 RGB通道数据值的矩阵，如果对一张图上的所有像素块都进行处理，运算量的庞大可想而知） 每一个内核都会处理三个频道的图像（像纯色的图像有纯色图像的独特内核进行处理），所以数据量仍很大，但是将一些非线性函数应用到特征上面时（ReLU什么的），仅需要研究亮度这一个频道 池化层 对来自卷积层的特征图进行挑选，舍弃非必要内容，提取重点内容（减小过拟合率，也能加快后续的处理） 也就是这种处理，可以提取出底层对象（这就简化了很多问题，放到手写数字识别上，想要分辨一个数字是否是8，我们只需要找到两个上下分布的圆） 池化层对特征图的提取有两种，一种是过滤最大值的内核，一种是求取平均值的内核 全连接层 （类似于前馈神经）将最后滤出的特征图进行分类 全连接层有储存所有结果可能的节点，每个节点与可以激活它的神经元相连，并且右边的层受相邻左边层的影响，所有影响会得到最后结果 奇怪的名词权重类比数学求取加权平均值中的权，权重指的就是神经元在计算影响因素的数据时，每个影响因素对最终结果的影响程度 未完待续…","categories":[{"name":"神经网络","slug":"神经网络","permalink":"https://biersaa.github.io/categories/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"CNN","slug":"CNN","permalink":"https://biersaa.github.io/tags/CNN/"}]},{"title":"搭建hexo+github博客","slug":"搭建hexo-github博客","date":"2021-12-18T11:33:53.000Z","updated":"2021-12-19T03:35:08.567Z","comments":true,"path":"2021/12/18/搭建hexo-github博客/","link":"","permalink":"https://biersaa.github.io/2021/12/18/%E6%90%AD%E5%BB%BAhexo-github%E5%8D%9A%E5%AE%A2/","excerpt":"搭建hexo+github博客 使用hexo环境准备：node和git 配置GitHub并安装hexo [两者不分先后] 写一篇博客并上传 之前遇到的问题汇总[根据实际情况进行更新]","text":"搭建hexo+github博客 使用hexo环境准备：node和git 配置GitHub并安装hexo [两者不分先后] 写一篇博客并上传 之前遇到的问题汇总[根据实际情况进行更新] 写在前面鉴于我本人只是个小白，写博客是用来记录自己这来之不易的成果、整理自己学到的东西，同时方便我后续再次搭建，希望看的人也能有所收获。如有问题，欢迎指正！OvO 环境准备node安装Node.js官网下载，可以按照你的实际需求进行选择，这里推荐下载LTS版本，current版本可能无法安装一些插件 安装时可以选择傻瓜式安装，一直默认下一步（大概是倒数第二步有一个“添加到环境路径”的选项，可以选择|有的人出现的报错可能是因为环境变量没有处理对，所以这里直接勾选它可能会省去一些麻烦） 安装完后，win+R，敲入cmd打开命令行，分别输入node -v和npm -v进行检查，如果成功，会显示版本号。大概是图片里的那样： npm是包管理器，我们可以通过它来安装一些插件什么的 添加镜像没有梯子的话，加载速度较慢，我们可以在命令行中敲下 1npm config set registry https://registry.npm.taobao.org 设置成淘宝的镜像源 git安装 它是一个控制工具，能将本地网页文件上传到GitHub 你如果对它各种操作细节感兴趣，能在廖雪峰老师的网站中，找到相关教程：廖老师的git教程 我们从git官网按需下载git，完成后，还是那一套：win+R，敲入cmd，回车（打开命令行），通过git version进行检查，出现版本号代表我们安装成功 配置GitHub 如果没有GitHub账号，就注册一个（你注册用的账户名后面会用到，推荐慎重考虑） 准备一个仓库新建一个仓库（在右上角的个人账号旁边，有个加号） 由此我们将会加载出下面这个页面： 为仓库命名，命名格式为：用户名.github.io（注意，用户名就是你账户的注册名，必须相同），比如我的注册名为Biersaa，那么我的仓库名应为Biersaa.github.io 勾选public（使我们的博客能被其他人看见） 最好勾选Add a README file，一是不同意在后续操作报错，二是我们直接创建了一个README文件，可以写上对仓库的描述给自己和浏览你仓库的人予以相关提示（它使用markdown语法） 创建仓库 生成ssh key ssh key指一种密钥，方便在你向仓库中提交代码、文件时判断提交的那台计算机是否属于账号本人的 打开命令行（相信这个操作你已经很熟练了：win+R,cmd），敲入 1ssh-keygen -t rsa -C &quot; &quot; 双引号内写上你的邮箱 然后会在c盘中，你的用户账号下生成一个.ssh文件夹，请找到名为id_rsa.pub的文件，复制里面的所有内容，我们下面要用到 回到GitHub，还是在右上角，我们进入个人账户的设置 在设置中找到管理ssh的页面（在settings中找到下面图片上的那个按键并点开） 创建一个ssh密钥 Title随便命名，你看着习惯就行；将我们刚刚从id_rsa.pub中复制的内容贴到Key里面，然后Add SSH key（添加一个新密钥） 安装Hexo在命令行中敲（全局安装hexo） 1npm install -g hexo-cli 安装完后还是老一套，可以用hexo version来检查是否安装成功（出现版本号即为成功） 我们准备一个文件夹，在文件夹中右键，点击出现的git bash here 在出现的窗口中敲下 1hexo init blog 你或许想把这里的 blog换成你喜欢的名字，请随意 这代表着新建一个名叫blog的文件夹并用hexo初始化它（hexo会在里面直接生成一些你的博客需要用到的文件） 接下来在里面敲npm install hexo-deployer-git --save，安装部署插件（使你之后编写的博文能够上传） 分别敲下git config --global user.name &quot;小明&quot;和git config --global user.email &quot;123@bala.com&quot;，用于GitHub判断进行上传操作的是不是你本人（这里的小明是你的用户名，&#x31;&#50;&#51;&#x40;&#98;&#97;&#108;&#97;&#46;&#x63;&#111;&#x6d;是你的邮箱；它们可以不是github的用户名和邮箱） 这里我曾采用过另一种方式，你如果好奇可以通过搜索引擎了解（不过我觉得没有这种好用） 我们现在可以通过git bash，敲入hexo s在本地进行预览 在浏览器上访问http://localhost:4000 ，就能看到生成的博客页面，在git bash中按ctrl+C则停止服务 以后我们对配置进行修改之前可以优先hexo s，避免将崩坏的页面上传 我们从博客文件夹的根目录下，右键打开git bash，依次执行下面三行命令（分别代表：清除缓存、生成页面、上传页面） 123hexo cleanhexo ghexo d 之后别人就可以直接从https://用户名.github.io访问到你的博客了，比如，你可以通过在浏览器中键入https://biersaa.github.io/ 来访问我的博客（我的博客对应的GitHub仓库名字其实为Biersaa，但链接就直接将大写转小写了） 写一篇自己的博客 这部分你可以从官方文档上详细了解 在git bash中敲hexo n &quot;文章的标题&quot;，就能新建一篇文章（符合markdown语法） 接下来 123hexo cleanhexo ghexo d 即可使这篇文章上传到你的博客 我遇到的问题 我第一遍搭的时候真的报错报到怀疑人生，做梦都是满满的报错飞到我脸上（太离谱了），可惜我没有进行记录 已经有了一个hexo博客想要于同一台电脑上再搭第二个？推荐链接","categories":[{"name":"杂七杂八","slug":"杂七杂八","permalink":"https://biersaa.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://biersaa.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]}],"categories":[{"name":"报错","slug":"报错","permalink":"https://biersaa.github.io/categories/%E6%8A%A5%E9%94%99/"},{"name":"神经网络","slug":"神经网络","permalink":"https://biersaa.github.io/categories/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"杂七杂八","slug":"杂七杂八","permalink":"https://biersaa.github.io/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"}],"tags":[{"name":"报错","slug":"报错","permalink":"https://biersaa.github.io/tags/%E6%8A%A5%E9%94%99/"},{"name":"CNN","slug":"CNN","permalink":"https://biersaa.github.io/tags/CNN/"},{"name":"博客","slug":"博客","permalink":"https://biersaa.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]}